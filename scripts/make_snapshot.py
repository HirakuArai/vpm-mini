#!/usr/bin/env python3
"""
Snapshot generation script for phase completion documentation.
"""
import argparse
import datetime
import subprocess
from pathlib import Path


def run_cmd(cmd):
    """Run shell command and return output."""
    try:
        result = subprocess.run(
            cmd, shell=True, capture_output=True, text=True, check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"Error: {e.stderr.strip()}"


def generate_snapshot(slug, dod, changes, ci_url=""):
    """Generate snapshot markdown file."""

    # Get current state
    git_hash = run_cmd("git rev-parse HEAD")[:8]
    branch = run_cmd("git branch --show-current")
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Get recent commits
    recent_commits = run_cmd("git log --oneline -5")

    # Check if compose services are working (if available)
    compose_status = "N/A"
    if Path("compose.yaml").exists():
        compose_status = run_cmd(
            "docker compose config -q && echo 'Valid' || echo 'Invalid'"
        )

    # Get file changes summary
    changed_files = run_cmd("git diff --name-only HEAD~5..HEAD | head -10")

    content = f"""# Snapshot: {slug}

**Generated**: {timestamp}  
**Git Hash**: {git_hash}  
**Branch**: {branch}  

## DoD Status
{dod}

## Changes Summary
{changes}

## Evidence
- CI URL: {ci_url}
- Compose Config: {compose_status}

## Recent Commits
```
{recent_commits}
```

## Changed Files (last 5 commits)
```
{changed_files}
```

## System State
- Repository: vpm-mini
- Phase: Phase 2
- Status: {slug} completed ✅

---
*Auto-generated by scripts/make_snapshot.py*
"""

    # Write to reports directory
    reports_dir = Path("reports")
    reports_dir.mkdir(exist_ok=True)

    snapshot_file = reports_dir / f"snap_{slug}.md"
    snapshot_file.write_text(content, encoding="utf-8")

    print(f"✅ Snapshot generated: {snapshot_file}")
    return snapshot_file


def main():
    parser = argparse.ArgumentParser(description="Generate phase completion snapshot")
    parser.add_argument(
        "--slug", required=True, help="Phase slug (e.g., phase2-0-pass)"
    )
    parser.add_argument("--dod", required=True, help="Definition of Done text")
    parser.add_argument("--changes", required=True, help="Changes summary")
    parser.add_argument("--ci_url", default="", help="CI URL for reference")

    args = parser.parse_args()

    snapshot_file = generate_snapshot(args.slug, args.dod, args.changes, args.ci_url)

    print("Snapshot ready:", snapshot_file)
    print("Next steps:")
    print(f"  git add {snapshot_file}")
    print(f"  git commit -m 'chore: snapshot {args.slug}'")
    print(f"  git tag {args.slug}")
    print("  git push origin main --tags")


if __name__ == "__main__":
    main()
