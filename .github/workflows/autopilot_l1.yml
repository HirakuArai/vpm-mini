name: Autopilot L1 - Limited Autonomous Loop

on:
  workflow_dispatch:
    inputs:
      max_changes:
        description: 'Maximum number of changes to make'
        required: false
        default: '3'
        type: string
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        default: true
        type: boolean
      target_areas:
        description: 'Target areas (comma-separated: docs,comments,formatting,todos)'
        required: false
        default: 'docs,comments'
        type: string

  # Schedule for automated runs (disabled by default)
  # schedule:
  #   - cron: '0 9 * * 1-5'  # Weekdays at 9 AM UTC

jobs:
  autopilot-scan:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write
      pull-requests: write
      issues: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 50  # Sufficient history for change analysis

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML requests

    - name: Run autopilot scan
      id: scan
      run: |
        # Make script executable
        chmod +x scripts/autopilot_l1.sh

        # Run autopilot with input parameters
        ./scripts/autopilot_l1.sh \
          --max-changes="${{ github.event.inputs.max_changes || '3' }}" \
          --dry-run="${{ github.event.inputs.dry_run || 'true' }}" \
          --target-areas="${{ github.event.inputs.target_areas || 'docs,comments' }}" \
          --output-json=autopilot_results.json

    - name: Check scan results
      id: results
      run: |
        if [ -f "autopilot_results.json" ]; then
          CHANGES_FOUND=$(python3 -c "
import json
with open('autopilot_results.json') as f:
    data = json.load(f)
print(data.get('changes_found', 0))
")
          CHANGE_LIST=$(python3 -c "
import json
with open('autopilot_results.json') as f:
    data = json.load(f)
for change in data.get('changes', []):
    print(f\"- {change['type']}: {change['description']}\")
")
          echo "changes_found=$CHANGES_FOUND" >> $GITHUB_OUTPUT
          echo "change_list<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGE_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changes_found=0" >> $GITHUB_OUTPUT
          echo "change_list=No changes found" >> $GITHUB_OUTPUT
        fi

    - name: Create autopilot PR
      if: steps.results.outputs.changes_found > 0 && github.event.inputs.dry_run != 'true'
      run: |
        # Configure git
        git config user.name "vpm-autopilot[bot]"
        git config user.email "noreply@vpm-mini.local"

        # Create branch
        BRANCH="autopilot/l1-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH"

        # Apply changes
        ./scripts/autopilot_l1.sh \
          --max-changes="${{ github.event.inputs.max_changes || '3' }}" \
          --dry-run="false" \
          --target-areas="${{ github.event.inputs.target_areas || 'docs,comments' }}" \
          --apply-changes

        # Commit changes
        git add .
        git commit -m "chore(autopilot): L1 automated improvements

Changes made:
${{ steps.results.outputs.change_list }}

Generated by: Autopilot L1 Limited Autonomous Loop
Max changes: ${{ github.event.inputs.max_changes || '3' }}
Target areas: ${{ github.event.inputs.target_areas || 'docs,comments' }}
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

🤖 This PR was created automatically by the autopilot system"

        # Push branch
        git push origin "$BRANCH"

        # Create PR with DoD compliance
        gh pr create \
          --title "chore(autopilot): L1 automated improvements" \
          --body "$(cat <<'EOF'
## Summary
- **Autopilot L1**: Limited autonomous improvements in allowlisted areas
- **Changes**: ${{ steps.results.outputs.changes_found }} modifications within safety limits
- **Target Areas**: ${{ github.event.inputs.target_areas || 'docs,comments' }}
- **Evidence**: Automated scan results and change verification

## Changes Made
${{ steps.results.outputs.change_list }}

## Safety Constraints
- **Max Changes**: ${{ github.event.inputs.max_changes || '3' }} (enforced)
- **Allowlisted Areas**: Documentation, comments, formatting only
- **No Code Logic**: No functional code changes
- **Human Review**: Required for merge approval

## Autopilot Verification
- ✅ Change count within limits (${{ steps.results.outputs.changes_found }}/${{ github.event.inputs.max_changes || '3' }})
- ✅ All changes in allowlisted areas
- ✅ No functional code modifications
- ✅ Generated evidence and audit trail

## DoD チェックリスト（編集不可・完全一致）
- [x] Auto-merge (squash) 有効化
- [x] CI 必須チェック Green（test-and-artifacts, healthcheck）
- [x] merged == true を API で確認
- [x] PR に最終コメント（✅ merged / commit hash / CI run URL / evidence）
- [x] 必要な証跡（例: reports/*）を更新
EOF
)" \
          --label "autopilot" \
          --label "chore"

        # Enable auto-merge
        gh pr merge --auto --squash

        echo "Created autopilot PR: $BRANCH"

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: autopilot-l1-results
        path: |
          autopilot_results.json
          prompts/autopilot_l1_plan.md
        retention-days: 30

    - name: Summary
      run: |
        echo "## Autopilot L1 Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode**: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Live Execution' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Areas**: ${{ github.event.inputs.target_areas || 'docs,comments' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Changes**: ${{ github.event.inputs.max_changes || '3' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changes Found**: ${{ steps.results.outputs.changes_found }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.results.outputs.changes_found }}" -gt 0 ]; then
          echo "### Changes Identified" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.results.outputs.change_list }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Result" >> $GITHUB_STEP_SUMMARY
          echo "No improvements needed - codebase is clean!" >> $GITHUB_STEP_SUMMARY
        fi