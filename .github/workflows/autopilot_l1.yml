name: Autopilot L1 (preflight)

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        default: true
        type: boolean
      max_lines:
        description: 'Maximum lines to change per run'
        required: false
        default: '3'
        type: string
      project:
        description: 'Project namespace'
        required: false
        default: 'vpm-mini'
        type: string

  workflow_call:
    inputs:
      project:
        required: false
        type: string
        default: 'vpm-mini'
      dry_run:
        required: false
        type: boolean
        default: true
      max_lines:
        required: false
        type: string
        default: '3'

  # Schedule for automated runs (disabled by default)
  # schedule:
  #   - cron: '0 9 * * 1-5'  # Weekdays at 9 AM UTC

jobs:
  autopilot-scan:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        shell: bash

    permissions:
      contents: write
      pull-requests: write
      actions: read
      issues: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for consistency with debug

    - name: Preflight (env&inputs)
      run: |
        set -euxo pipefail
        echo "=== Environment Info ==="
        echo "whoami=$(whoami)"
        echo "pwd=$(pwd)"
        echo "runner.os=${{ runner.os }}"
        echo "git version: $(git --version)"
        echo "python version: $(python3 --version)"
        echo ""
        echo "=== Input Resolution ==="
        echo "inputs.project=${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}"
        echo "inputs.dry_run=${{ inputs.dry_run || github.event.inputs.dry_run || true }}"
        echo "inputs.max_lines=${{ inputs.max_lines || github.event.inputs.max_lines || 3 }}"
        echo ""
        echo "=== Git Configuration ==="
        git config --global core.autocrlf input
        git status --porcelain || true
        echo ""
        echo "=== Directory Structure ==="
        ls -la
        ls -la scripts || true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML requests

    - name: Run autopilot scan
      id: scan
      run: |
        set -euxo pipefail
        chmod +x scripts/autopilot_l1.sh scripts/run_codex.sh || true
        mkdir -p reports/${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}
        mkdir -p reports/_runner_logs

        # Run autopilot with input parameters (unified dispatch/call) - tee to capture stdout
        echo "=== Autopilot L1 Execution Starting ==="
        ./scripts/autopilot_l1.sh \
          --project="${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}" \
          --dry-run="${{ inputs.dry_run || github.event.inputs.dry_run || 'true' }}" \
          --max-lines="${{ inputs.max_lines || github.event.inputs.max_lines || '3' }}" \
          | tee reports/_runner_logs/autopilot_l1_stdout.log
        echo "=== Autopilot L1 Execution Complete ==="

    - name: Check scan results
      id: results
      run: |
        # Check for JSON output from autopilot script
        JSON_FILE=$(ls reports/autopilot_l1_scan_*.json 2>/dev/null | head -n1 || echo "")
        if [ -n "$JSON_FILE" ] && [ -f "$JSON_FILE" ]; then
          CHANGES_FOUND=$(python3 -c "
import json
with open('$JSON_FILE') as f:
    data = json.load(f)
print(data.get('scan_results', {}).get('changes_identified', 0))
")
          echo "changes_found=$CHANGES_FOUND" >> $GITHUB_OUTPUT
          echo "json_file=$JSON_FILE" >> $GITHUB_OUTPUT
        else
          echo "changes_found=0" >> $GITHUB_OUTPUT
          echo "json_file=" >> $GITHUB_OUTPUT
        fi

    - name: Create autopilot PR
      if: steps.results.outputs.changes_found > 0 && github.event.inputs.dry_run != 'true'
      run: |
        echo "ðŸš§ Autopilot L1 placeholder: PR creation disabled until real implementation"
        echo "Changes would have been applied with:"
        echo "- Project: ${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}"
        echo "- Max Lines: ${{ inputs.max_lines || github.event.inputs.max_lines || '3' }}"
        echo "- Changes Found: ${{ steps.results.outputs.changes_found }}"

    - name: Collect logs
      if: always()
      run: |
        mkdir -p reports/_runner_logs
        echo "=== Collecting All Logs and Reports ==="
        cp -r reports/* reports/_runner_logs/ 2>/dev/null || true
        echo "job.conclusion=${{ job.status }}" > reports/_runner_logs/summary.txt
        echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> reports/_runner_logs/summary.txt
        echo "runner=ubuntu-22.04" >> reports/_runner_logs/summary.txt
        echo "project=${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}" >> reports/_runner_logs/summary.txt
        echo "dry_run=${{ inputs.dry_run || github.event.inputs.dry_run || 'true' }}" >> reports/_runner_logs/summary.txt
        echo "max_lines=${{ inputs.max_lines || github.event.inputs.max_lines || '3' }}" >> reports/_runner_logs/summary.txt

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: autopilot-l1-${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}-${{ github.run_id }}
        path: |
          reports/autopilot_l1_*.md
          reports/autopilot_l1_*.json
          reports/${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}/state_view_*.md
          reports/_runner_logs/
        retention-days: 30
        if-no-files-found: warn

    - name: Summary
      run: |
        echo "## Autopilot L1 Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode**: ${{ (inputs.dry_run || github.event.inputs.dry_run || 'true') == 'true' && 'Dry Run' || 'Live Execution' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ inputs.project || github.event.inputs.project || 'vpm-mini' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Lines**: ${{ inputs.max_lines || github.event.inputs.max_lines || '3' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changes Found**: ${{ steps.results.outputs.changes_found }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ steps.results.outputs.json_file }}" ]; then
          echo "### Evidence Generated" >> $GITHUB_STEP_SUMMARY
          echo "- JSON Report: ${{ steps.results.outputs.json_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- Evidence Report: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Result" >> $GITHUB_STEP_SUMMARY
          echo "Preflight checks completed successfully" >> $GITHUB_STEP_SUMMARY
        fi
# touch to refresh index - 20250920_054014
