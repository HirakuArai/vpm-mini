name: render-grafana-png
on:
  schedule:
    - cron: "0 0 * * *"  # 09:00 JST (UTC 00:00)
  workflow_dispatch:
    inputs:
      from:
        description: 'time range from'
        default: 'now-30m'
      to:
        description: 'time range to'
        default: 'now'
permissions:
  contents: write
  pull-requests: write
  actions: read

concurrency:
  group: render-grafana-png-${{ github.ref }}
  cancel-in-progress: true
jobs:
  render:
    strategy:
      matrix:
        include:
          - uid: vpm-basic-observability
            panelId: "2"
            evidence_prefix: p3_2_auto
          - uid: p4-uptime-blackbox
            panelId: ""
            evidence_prefix: p4_uptime
    runs-on: [self-hosted, local-mac]
    timeout-minutes: 20
    env:
      LOCAL_URL: http://127.0.0.1:3000
      GRAFANA_NS: monitoring
      GRAFANA_SVC: kps-grafana
      UID: ${{ matrix.uid }}
      PANEL_ID: ${{ matrix.panelId }}
      EVIDENCE_PREFIX: ${{ matrix.evidence_prefix }}
      FROM: ${{ github.event.inputs.from || 'now-30m' }}
      TO: ${{ github.event.inputs.to || 'now' }}
    steps:
      - name: Echo target context
        run: |
          echo UID=${UID}
          echo PANEL_ID=${PANEL_ID:-}
          echo EVIDENCE_PREFIX=${EVIDENCE_PREFIX:-}
      - name: Start Grafana port-forward
        run: |
          set -euo pipefail
          echo "Starting kubectl port-forward for ${GRAFANA_SVC} in ns=${GRAFANA_NS} → 127.0.0.1:3000"
          kubectl -n "${GRAFANA_NS}" port-forward "svc/${GRAFANA_SVC}" 3000:80 >/dev/null 2>&1 &
          echo $! > pf.pid
          for i in $(seq 1 30); do
            if curl -sfS "$LOCAL_URL/api/health" >/dev/null; then
              echo "Grafana is reachable (attempt $i)"
              break
            fi
            sleep 1
          done
          curl -sfS "$LOCAL_URL/api/health" >/dev/null || { echo "Grafana not reachable after waiting"; exit 1; }
      - uses: actions/checkout@v4

      - name: Resolve render target
        run: |
          set -euo pipefail
          echo "Rendering UID=${UID} PANEL_ID=${PANEL_ID:-<none>} range ${FROM} → ${TO}"

      - name: Health check
        run: curl -fsS "$LOCAL_URL/api/health" >/dev/null

      - name: Render PNG via /render
        env:
          GRAFANA_USER: ${{ secrets.GRAFANA_USER }}
          GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${GRAFANA_USER:-}" ] || [ -z "${GRAFANA_PASSWORD:-}" ]; then
            echo "Grafana credentials secrets are required" >&2
            exit 1
          fi

          TS="$(date +%Y%m%d_%H%M%S)"
          OUT_DIR="reports/img"
          mkdir -p "$OUT_DIR"
          OUT="${OUT_DIR}/grafana_${UID}_${TS}.png"

          AUTH=(-u "${GRAFANA_USER}:${GRAFANA_PASSWORD}")
          if [ -n "${PANEL_ID:-}" ]; then
            echo "Render mode: d-solo (panelId=${PANEL_ID})"
            curl -fsS "${AUTH[@]}" -G "$LOCAL_URL/render/d-solo/${UID}" \
              --data-urlencode "panelId=${PANEL_ID}" \
              --data-urlencode "from=${FROM}" --data-urlencode "to=${TO}" \
              --data-urlencode "width=1600" --data-urlencode "height=900" \
              -o "$OUT"
          else
            echo "Render mode: dashboard (uid=${UID})"
            curl -fsS "${AUTH[@]}" -G "$LOCAL_URL/render/d/${UID}" \
              --data-urlencode "from=${FROM}" --data-urlencode "to=${TO}" \
              --data-urlencode "width=1600" --data-urlencode "height=900" \
              -o "$OUT"
          fi

          test -s "$OUT" || { echo "Render failed: empty $OUT"; exit 1; }

      - name: Note evidence UID
        run: echo "EVIDENCE UID: ${UID} PANEL: ${PANEL_ID:-none}"

      - name: Append Evidence MD
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          MD="reports/${UID}_grafana_render_${TS}.md"
          mkdir -p reports
          {
            echo "# Grafana Render Evidence (${UID})"
            echo ""
            echo "- Range: ${FROM} → ${TO}"
            echo "- Panel: ${PANEL_ID:-none}"
            echo "- Image: reports/img/grafana_${UID}_${TS}.png"
          } > "$MD"
          test -s "$MD"

      - name: Create PR with artifacts
        uses: peter-evans/create-pull-request@v6
        id: create_pr
        with:
          token: ${{ secrets.PR_BOT_TOKEN }}
          commit-message: "chore(render): add Grafana evidence (${UID})"
          title: "chore(render): auto-render evidence (${UID})"
          body: |
            Auto-generated evidence from workflow run ${{ github.run_id }}.
            - Dashboard UID: ${UID}
            - Panel ID: ${PANEL_ID:-<none>}
            - Range: ${FROM} → ${TO}
          branch: "bot/render/${{ github.run_id }}"
          add-paths: |
            reports/${UID}_grafana_render_*.md
            reports/img/grafana_${UID}_*.png
          labels: p3-2,evidence,bot
          delete-branch: true

      - name: Echo Evidence PR URL (if created)
        if: ${{ steps.create_pr.outputs.pull-request-url != '' }}
        run: |
          echo "Evidence PR: ${{ steps.create_pr.outputs.pull-request-url }}"

      - name: Cleanup port-forward
        if: always()
        run: |
          if [ -f pf.pid ]; then
            kill "$(cat pf.pid)" 2>/dev/null || true
            rm -f pf.pid
          fi

      - name: Create PR with artifacts
        uses: peter-evans/create-pull-request@v6
        id: create_pr
        with:
          token: ${{ secrets.PR_BOT_TOKEN }}
          commit-message: "chore(render): add Grafana evidence (${UID})"
          title: "chore(render): auto-render evidence (${UID})"
          body: |
            Auto-generated evidence from workflow run ${{ github.run_id }}.
            - Dashboard UID: ${UID}
            - Panel ID: ${PANEL_ID:-<none>}
            - Range: ${FROM} → ${TO}
          branch: "bot/render/${{ github.run_id }}"
          add-paths: |
            reports/${UID}_grafana_render_*.md
            reports/img/grafana_${UID}_*.png
          labels: p3-2,evidence,bot
          delete-branch: true

      - name: Echo Evidence PR URL (if created)
        if: ${{ steps.create_pr.outputs.pull-request-url != '' }}
        run: |
          echo "Evidence PR: ${{ steps.create_pr.outputs.pull-request-url }}"

      - name: Cleanup port-forward
        if: always()
        run: |
          if [ -f pf.pid ]; then
            kill "$(cat pf.pid)" 2>/dev/null || true
            rm -f pf.pid
          fi

# TODO: wire dashboard UID into this workflow
# Suggested UID: "p4-uptime-blackbox" (current workflow renders a single dashboard via infra/observability/grafana-dashboard-basic.json)
