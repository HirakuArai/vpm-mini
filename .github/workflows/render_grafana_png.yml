name: Render Grafana PNG

on:
  workflow_dispatch:
    inputs:
      from:
        description: "From time (Grafana time range)"
        required: false
        default: "now-30m"
      to:
        description: "To time"
        required: false
        default: "now"
  schedule:
    - cron: "0 22 * * *"  # 07:00 JST

jobs:
  render:
    runs-on: [self-hosted, k8s-runner]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Prepare params
        id: prep
        run: |
          FROM="${{ github.event.inputs.from || 'now-30m' }}"
          TO="${{ github.event.inputs.to   || 'now' }}"
          echo "from=$FROM" >> $GITHUB_OUTPUT
          echo "to=$TO"     >> $GITHUB_OUTPUT

      - name: Render dashboard (anonymous, in-cluster)
        run: |
          BASE="http://grafana.monitoring.svc.cluster.local"
          DASH_UID="a128c0c0-c3f9-43e6-8476-dac42fe03110"
          DASH_SLUG="evidence-smoke"
          AUTH_FLAGS=()
          if [ -n "${render_user:-}" ] && [ -n "${render_pass:-}" ]; then
            AUTH_FLAGS=(-u "${render_user}:${render_pass}")
          fi
          curl -sSf "${AUTH_FLAGS[@]}" -G "$BASE/render/d-solo/$DASH_UID/$DASH_SLUG" \
            --data-urlencode "from=${{ steps.prep.outputs.from }}" \
            --data-urlencode "to=${{ steps.prep.outputs.to }}" \
            --data-urlencode "orgId=1" \
            --data-urlencode "panelId=1" \
            --output out.png

      - name: Attach evidence log footer
        run: |
          echo "== FOOTER == VALIDATE: OK (Grafana /render)" >> evidence.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grafana-render
          path: |
            out.png
            evidence.log

  notify-on-failure:
    needs: render
    if: ${{ failure() }}
    runs-on: [self-hosted, k8s-runner]
    steps:
      - name: Open issue on failure
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_TITLE: Render Grafana PNG failed on ${{ github.ref_name }} (${{ github.run_id }})
          ISSUE_BODY: |-
            Auto-opened because /render job failed.

            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Commit: ${{ github.sha }}
        run: |
          ISSUE_JSON=$(python - <<'PY2'
import json
import os
print(json.dumps({
    "title": os.environ["ISSUE_TITLE"],
    "body": os.environ["ISSUE_BODY"],
    "labels": ["evidence", "monitoring", "runner"],
}))
PY2
)
          response=$(echo "$ISSUE_JSON" | curl -sS -X POST             -H "Authorization: Bearer $GH_TOKEN"             -H "Accept: application/vnd.github+json"             -d @-             "${{ github.api_url }}/repos/${{ github.repository }}/issues")
          echo "$response" | python - <<'PY3'
import json
import sys
resp=json.load(sys.stdin)
url=resp.get('html_url')
if not url:
    print('Issue creation may have failed:', resp)
else:
    print('Issue created:', url)
PY3
