# touch: refresh dispatch recognition
name: Render Grafana PNG

on:
  workflow_call:
    inputs:
      from:
        required: false
        type: string
        default: "now-30m"
      to:
        required: false
        type: string
        default: "now"
      force_fail:
        required: false
        type: string
        default: "false"
  workflow_dispatch:
    inputs:
      from:
        description: "From time (Grafana time range)"
        required: false
        default: "now-30m"
      to:
        description: "To time"
        required: false
        default: "now"
      force_fail:
        description: "Force workflow failure (testing)"
        required: false
        default: "false"
  schedule:
    - cron: "0 22 * * *"  # 07:00 JST

jobs:
  render:
    runs-on: [self-hosted, k8s-runner]
    permissions:
      contents: write
      pull-requests: write
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Prepare params
        id: prep
        env:
          INPUT_FROM: ${{ inputs.from || github.event.inputs.from || 'now-30m' }}
          INPUT_TO: ${{ inputs.to || github.event.inputs.to || 'now' }}
          INPUT_FORCE_FAIL: ${{ inputs.force_fail || github.event.inputs.force_fail || 'false' }}
        run: |
          FROM="${INPUT_FROM}"
          TO="${INPUT_TO}"
          echo "from=$FROM" >> $GITHUB_OUTPUT
          echo "to=$TO"     >> $GITHUB_OUTPUT
          FORCE_FAIL="${INPUT_FORCE_FAIL}"
          echo "force_fail=$FORCE_FAIL" >> $GITHUB_OUTPUT

      - name: Render dashboard (anonymous, in-cluster)
        run: |
          if [ "${{ steps.prep.outputs.force_fail }}" = "true" ]; then
            echo "Force failure requested"
            exit 1
          fi
          BASE="http://grafana.monitoring.svc.cluster.local"
          DASH_UID="a128c0c0-c3f9-43e6-8476-dac42fe03110"
          DASH_SLUG="evidence-smoke"
          AUTH_FLAGS=()
          if [ -n "${render_user:-}" ] && [ -n "${render_pass:-}" ]; then
            AUTH_FLAGS=(-u "${render_user}:${render_pass}")
          fi
          curl -sSf "${AUTH_FLAGS[@]}" -G "$BASE/render/d-solo/$DASH_UID/$DASH_SLUG" \
            --data-urlencode "from=${{ steps.prep.outputs.from }}" \
            --data-urlencode "to=${{ steps.prep.outputs.to }}" \
            --data-urlencode "orgId=1" \
            --data-urlencode "panelId=1" \
            --output out.png
          test -s out.png  # fail if empty

      - name: Attach evidence log footer
        run: |
          echo "== FOOTER == VALIDATE: OK (Grafana /render)" >> evidence.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grafana-render
          path: |
            out.png
            evidence.log

      - name: Stamp daily.md (prepare PR)
        id: stamp
        run: |
          DATE=$(date -u +%F)
          mkdir -p reports
          {
            echo "# Evidence $DATE"
            echo
            echo "FOOTER: RUN=${GITHUB_RUN_ID} RANGE=${{ steps.prep.outputs.from }}-${{ steps.prep.outputs.to }} VERIFY=size=$(wc -c < out.png)"
          } > reports/daily.md
          echo "date=$DATE" >> "$GITHUB_OUTPUT"
          echo "verify=$(wc -c < out.png)" >> "$GITHUB_OUTPUT"

      - name: Open PR with evidence
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "evidence: ${{ steps.stamp.outputs.date }} run ${{ github.run_id }}"
          title: "evidence: ${{ steps.stamp.outputs.date }} run ${{ github.run_id }}"
          body: |
            Auto-generated daily evidence.

            FOOTER: RUN=${{ github.run_id }}
            RANGE:  ${{ steps.prep.outputs.from }}-${{ steps.prep.outputs.to }}
            VERIFY: size=${{ steps.stamp.outputs.verify }}
          branch: "bot/evidence/${{ github.run_id }}"
          branch-suffix: timestamp
          delete-branch: true
          base: "main"
          labels: "evidence,bot"

      - name: Enable auto-merge (squash) for evidence PR
        if: always() && steps.cpr.outputs.pull-request-number || github.event_name == 'workflow_call'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO_FULL: ${{ github.repository }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          python - <<'PY2'
import json
import os
import sys
import urllib.request

token = os.environ['GH_TOKEN']
owner = os.environ['OWNER']
repo_full = os.environ['REPO_FULL']
repo = repo_full.split('/', 1)[1] if '/' in repo_full else repo_full
number = int(os.environ['PR_NUMBER'])

url = 'https://api.github.com/graphql'
headers = {
    'Authorization': f'bearer {token}',
    'Content-Type': 'application/json',
}

def graphql(query, variables):
    payload = json.dumps({'query': query, 'variables': variables}).encode()
    req = urllib.request.Request(url, data=payload, headers=headers)
    with urllib.request.urlopen(req) as resp:
        body = json.load(resp)
    if 'errors' in body:
        raise SystemExit(f\"GitHub GraphQL error: {body['errors']}\")
    return body['data']

data = graphql(
    'query ($owner:String!, $name:String!, $number:Int!){ repository(owner:$owner, name:$name) { pullRequest(number:$number) { id } } }',
    {'owner': owner, 'name': repo, 'number': number},
)
pr_id = data['repository']['pullRequest']['id']
graphql(
    'mutation($pr:ID!, $method:PullRequestMergeMethod!){ enablePullRequestAutoMerge(input:{pullRequestId:$pr, mergeMethod:$method}) { clientMutationId } }',
    {'pr': pr_id, 'method': 'SQUASH'},
)
print(f\"Queued auto-merge for PR #{number}\")
PY2

  notify-on-failure:
    needs: render
    if: ${{ failure() }}
    runs-on: [self-hosted, k8s-runner]
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runId = context.runId;
            const title = `Render Grafana PNG failed on ${context.ref} (${runId})`;
            const body = [
              'Auto-opened because /render job failed.',
              '',
              `Run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`,
              `Commit: ${context.sha}`
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['evidence','monitoring','runner'],
            });
