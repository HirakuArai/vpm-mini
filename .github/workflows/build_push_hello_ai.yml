name: Build & Push hello-ai (GHCR)
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag (e.g. 1.0.0)"
        required: true
        default: "1.0.0"
permissions:
  contents: read
  packages: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive lowercase owner
        id: who
        shell: bash
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      # --- Debug: Show repository layout
      - name: Debug repository layout
        shell: bash
        run: |
          echo "pwd=$(pwd)"
          git status --porcelain
          echo "---- top files"; ls -la
          echo "---- find hello-ai candidates"; git ls-files | grep -Ei '(^|/)(hello[-_]ai)(/|$)' || true
          echo "---- list Dockerfiles"; git ls-files | grep -Ei '(^|/)Dockerfile' || true

      # --- Auto-discover Dockerfile (hello-ai path priority)
      - name: Discover Dockerfile for hello-ai
        id: find
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t CANDS < <(git ls-files | grep -Ei '(^|/)(hello[-_]ai)(/|$)' | xargs -I{} dirname {} | sort -u | xargs -I{} bash -lc 'if [ -f "{}/Dockerfile" ]; then echo {}; fi')
          if [ "${#CANDS[@]}" -eq 0 ]; then
            # fallback: check common locations
            for d in services/hello-ai apps/hello-ai src/hello-ai hello-ai; do
              if [ -f "$d/Dockerfile" ]; then CANDS+=("$d"); break; fi
            done
          fi
          if [ "${#CANDS[@]}" -eq 0 ]; then
            echo "::error ::Dockerfile for hello-ai not found. Place it under *hello-ai*/Dockerfile."
            exit 1
          fi
          CONTEXT="${CANDS[0]}"
          echo "context=$CONTEXT"      >> "$GITHUB_OUTPUT"
          echo "dockerfile=$CONTEXT/Dockerfile" >> "$GITHUB_OUTPUT"
          echo "Using CONTEXT=$CONTEXT DOCKERFILE=$CONTEXT/Dockerfile"

      # --- Build & Push using auto-discovered paths
      - name: Build & Push (hello-ai)
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ steps.who.outputs.owner_lc }}/hello-ai:${{ github.event.inputs.tag }}"
          echo "IMAGE=$IMAGE"
          docker buildx build --progress=plain \
            -t "$IMAGE" \
            -f "${{ steps.find.outputs.dockerfile }}" "${{ steps.find.outputs.context }}" \
            --push

      - name: Evidence
        run: echo "pushed=ghcr.io/${{ steps.who.outputs.owner_lc }}/hello-ai:${{ github.event.inputs.tag }}" | tee -a reports/ghcr_publish.txt