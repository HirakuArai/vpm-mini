name: Evidence Check
on:
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  check:
    name: Validate Evidence Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract file paths from PR body (evidence block only)
        uses: actions/github-script@v7
        id: body
        with:
          script: |
            try {
              const body = context.payload.pull_request?.body || "";
              
              // Look for ```evidence block (line-start fences only)
              const evidenceMatch = body.match(/^```evidence[ \t]*\r?\n([\s\S]*?)^```/im);
              
              if (!evidenceMatch) {
                console.log("No ```evidence block found in PR body");
                core.notice("No ```evidence block found; skipping enforcement for this PR.");
                core.setOutput('paths', JSON.stringify([]));
                core.setOutput('count', 0);
                core.setOutput('has_evidence_block', false);
                return;
              }
              
              // Extract lines from evidence block
              const evidenceContent = evidenceMatch[1];
              const lines = evidenceContent
                .split(/\r?\n/)
                .map(line => line.trim())
                .filter(line => line.length > 0);
              
              // Filter for file paths (contains /)
              const paths = lines.filter(line => {
                return line.includes('/') && 
                       !line.includes(' ') &&
                       !line.includes('://') &&
                       !line.startsWith('#') &&
                       !line.startsWith('//');
              });
              
              // Remove duplicates
              const uniquePaths = [...new Set(paths)];
              
              console.log(`Found ${uniquePaths.length} file paths in evidence block:`);
              uniquePaths.forEach(p => console.log(`  - ${p}`));
              
              core.setOutput('paths', JSON.stringify(uniquePaths));
              core.setOutput('count', uniquePaths.length);
              core.setOutput('has_evidence_block', true);
            } catch (e) {
              console.error("Error extracting paths:", e);
              core.setOutput('paths', '[]');
              core.setOutput('count', 0);
              core.setOutput('has_evidence_block', false);
            }

      - name: Get actual diff paths
        id: diff
        run: |
          # Fetch base branch
          git fetch origin ${{ github.base_ref }} --depth=1
          
          # Get list of changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > diff.txt
          
          echo "Files changed in this PR:"
          cat diff.txt | sed 's/^/  - /'
          
          # Convert to JSON array
          jq -Rs 'split("\n") | map(select(length > 0))' diff.txt > diff.json
          
          # Output for next step（multi-line safe）
          {
            echo "paths<<__JSON__"
            cat diff.json
            echo "__JSON__"
          } >> "$GITHUB_OUTPUT"
          echo "count=$(jq 'length' diff.json)" >> "$GITHUB_OUTPUT"

      - name: Compare evidence with actual changes
        run: |
          # Check if evidence block exists
          HAS_EVIDENCE_BLOCK='${{ steps.body.outputs.has_evidence_block }}'
          
          echo "================================"
          echo "Evidence Check Results"
          echo "================================"
          
          # If no evidence block, pass with notice
          if [ "$HAS_EVIDENCE_BLOCK" != "true" ]; then
            echo "ℹ️  No \`\`\`evidence block found in PR body"
            echo "This check is skipped for PRs without an evidence block."
            echo "To enable strict file path validation, add an evidence block:"
            echo "\`\`\`evidence"
            echo "path/to/file1.yml"
            echo "path/to/file2.md"
            echo "\`\`\`"
            echo "================================"
            echo "::notice::No evidence block found; skipping strict validation."
            exit 0
          fi
          
          # BODY: PR 本文から抽出した evidence パス一覧（JSON配列）
          BODY_JSON='${{ steps.body.outputs.paths }}'
          
          # 正規化関数: 前後空白・CR除去、空行は除外
          norm() { sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/\r$//' | awk 'length>0'; }
          
          echo "$BODY_JSON" | jq -r '.[]?' | norm | sort -u > _body.txt
          jq -r '.[]' diff.json | norm | sort -u > _diff.txt
          
          echo '--- BODY (normalized) ---'; cat _body.txt || true
          echo '--- DIFF (normalized) ---'; cat _diff.txt || true
          
          # If evidence block exists but is empty
          if [ ! -s _body.txt ]; then
            echo "⚠️  Evidence block exists but contains no file paths"
            echo "Files changed in this PR:"
            cat _diff.txt | sed 's/^/  - /'
            echo "================================"
            echo "::warning::Evidence block is empty. Consider listing changed files."
            exit 0
          fi
          
          # Check for missing files
          MISS=$(comm -23 _body.txt _diff.txt || true)
          if [ -n "$MISS" ]; then
            echo "❌ Files in evidence block but NOT in actual diff:"
            echo "$MISS" | sed 's/^/  - /'
            echo ""
            echo "⚠️  These files may be typos or were not actually changed."
            echo "================================"
            echo "::error::Evidence block contains files that are not in the actual diff. Please correct the file paths."
            exit 1
          else
            echo "✅ All files in evidence block match the actual diff!"
            echo "  - $(wc -l < _body.txt) files in evidence block"
            echo "  - $(wc -l < _diff.txt) files changed in diff"
            echo ""
            echo "Validated evidence files:"
            cat _body.txt | sed 's/^/  ✓ /'
            echo "================================"
            echo "::notice::✅ Evidence check passed - all listed files are in the diff"
          fi