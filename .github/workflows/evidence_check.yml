name: Evidence Check
on:
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  check:
    name: Validate Evidence Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract file paths from PR body (evidence block only)
        uses: actions/github-script@v7
        id: body
        with:
          script: |
            try {
              const body = context.payload.pull_request?.body || "";
              
              // Look for ```evidence block (line-start fences only)
              const evidenceMatch = body.match(/^```evidence[ \t]*\r?\n([\s\S]*?)^```/im);
              
              if (!evidenceMatch) {
                console.log("No ```evidence block found in PR body");
                core.notice("No ```evidence block found; skipping enforcement for this PR.");
                core.setOutput('paths', JSON.stringify([]));
                core.setOutput('count', 0);
                core.setOutput('has_evidence_block', false);
                return;
              }
              
              // Extract lines from evidence block
              const evidenceContent = evidenceMatch[1];
              const lines = evidenceContent
                .split(/\r?\n/)
                .map(line => line.trim())
                .filter(line => line.length > 0);
              
              // Filter for file paths (contains /)
              const paths = lines.filter(line => {
                return line.includes('/') && 
                       !line.includes(' ') &&
                       !line.includes('://') &&
                       !line.startsWith('#') &&
                       !line.startsWith('//');
              });
              
              // Remove duplicates
              const uniquePaths = [...new Set(paths)];
              
              console.log(`Found ${uniquePaths.length} file paths in evidence block:`);
              uniquePaths.forEach(p => console.log(`  - ${p}`));
              
              core.setOutput('paths', JSON.stringify(uniquePaths));
              core.setOutput('count', uniquePaths.length);
              core.setOutput('has_evidence_block', true);
            } catch (e) {
              console.error("Error extracting paths:", e);
              core.setOutput('paths', '[]');
              core.setOutput('count', 0);
              core.setOutput('has_evidence_block', false);
            }

      - name: Get actual diff paths
        id: diff
        run: |
          # Fetch base branch
          git fetch origin ${{ github.base_ref }} --depth=1
          
          # Get list of changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > diff.txt
          
          echo "Files changed in this PR:"
          cat diff.txt | sed 's/^/  - /'
          
          # Convert to JSON array
          jq -Rs 'split("\n") | map(select(length > 0))' diff.txt > diff.json
          
          # Output for next step（multi-line safe）
          {
            echo "paths<<__JSON__"
            cat diff.json
            echo "__JSON__"
          } >> "$GITHUB_OUTPUT"
          echo "count=$(jq 'length' diff.json)" >> "$GITHUB_OUTPUT"

      - name: Compare evidence with actual changes
        uses: actions/github-script@v7
        with:
          script: |
            const hasEvidenceBlock = ${{ steps.body.outputs.has_evidence_block }};
            const bodyPaths = JSON.parse('${{ steps.body.outputs.paths }}');
            const diffPaths = JSON.parse('${{ steps.diff.outputs.paths }}');
            
            console.log("================================");
            console.log("Evidence Check Results");
            console.log("================================");
            
            // If no evidence block, pass with notice
            if (!hasEvidenceBlock) {
              console.log("ℹ️  No ```evidence block found in PR body");
              console.log("This check is skipped for PRs without an evidence block.");
              console.log("To enable strict file path validation, add an evidence block:");
              console.log("```evidence");
              console.log("path/to/file1.yml");
              console.log("path/to/file2.md");
              console.log("```");
              console.log("================================");
              core.notice("No evidence block found; skipping strict validation.");
              return;
            }
            
            // If evidence block exists but is empty
            if (bodyPaths.length === 0) {
              console.log("⚠️  Evidence block exists but contains no file paths");
              console.log("Files changed in this PR:");
              diffPaths.forEach(p => console.log(`  - ${p}`));
              console.log("================================");
              core.warning("Evidence block is empty. Consider listing changed files.");
              return;
            }
            
            // Check for paths mentioned in evidence block but not in diff
            const notInDiff = bodyPaths.filter(p => {
              // Exact match required for evidence block
              return !diffPaths.includes(p);
            });
            
            let hasErrors = false;
            
            if (notInDiff.length > 0) {
              console.log("❌ Files in evidence block but NOT in actual diff:");
              notInDiff.forEach(p => console.log(`  - ${p}`));
              console.log("\n⚠️  These files may be typos or were not actually changed.");
              hasErrors = true;
            } else {
              console.log("✅ All files in evidence block match the actual diff!");
              console.log(`  - ${bodyPaths.length} files in evidence block`);
              console.log(`  - ${diffPaths.length} files changed in diff`);
              
              // Show which evidence files were validated
              console.log("\nValidated evidence files:");
              bodyPaths.forEach(p => console.log(`  ✓ ${p}`));
            }
            
            console.log("================================");
            
            if (hasErrors) {
              core.setFailed("Evidence block contains files that are not in the actual diff. Please correct the file paths.");
            } else {
              core.notice("✅ Evidence check passed - all listed files are in the diff");
            }