name: pr-validate

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  k8s-validate:
    name: k8s-validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Kustomize build only
        run: |
          set -euo pipefail

          cd infra/k8s/overlays/dev

          echo "Building kustomize..."
          kubectl kustomize . > /tmp/manifest.yaml

          echo "‚úÖ Kustomize build passed ($(wc -l < /tmp/manifest.yaml) lines)"
          echo "Note: kubectl apply --dry-run skipped (requires cluster)"

  knative-ready:
    name: knative-ready
    needs: [k8s-validate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup KinD
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: vpm-test
          wait: 60s

      - name: Install Knative Serving
        run: |
          set -euo pipefail

          echo "Installing Knative Serving v1.15.0..."
          kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.15.0/serving-crds.yaml
          kubectl wait --for=condition=Established --all crd --timeout=120s

          kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.15.0/serving-core.yaml
          kubectl wait --for=condition=Available --all deployments -n knative-serving --timeout=360s

          echo "Installing Kourier networking..."
          kubectl apply -f https://github.com/knative/net-kourier/releases/download/knative-v1.15.0/kourier.yaml
          kubectl wait --for=condition=Available --all deployments -n kourier-system --timeout=360s

          kubectl patch configmap/config-network \
            --namespace knative-serving \
            --type merge \
            --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}'

          echo "Configuring DNS..."
          kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.15.0/serving-default-domain.yaml

          echo "‚úÖ Knative Serving installed"

      - name: Apply Knative Service
        run: |
          set -euo pipefail

          KSVC_PATH="infra/k8s/overlays/dev/hello-ksvc.yaml"

          if [ ! -f "$KSVC_PATH" ]; then
            echo "::error::$KSVC_PATH not found"
            exit 1
          fi

          echo "Applying Knative Service from $KSVC_PATH..."
          kubectl apply -f "$KSVC_PATH"

      - name: Ensure serving/kourier deployments are Available
        run: |
          set -euo pipefail
          kubectl -n knative-serving  rollout status deploy --all --timeout=5m
          kubectl -n kourier-system   rollout status deploy --all --timeout=5m

      - name: Wait for READY=True (robust)
        run: |
          set -euo pipefail
          # Ready Êù°‰ª∂„ÇíÂÖ¨Âºè„Å´ÂæÖ„Å§ÔºàÊúÄÂ§ß10ÂàÜÔºâ
          kubectl wait --for=condition=Ready ksvc/hello -n default --timeout=10m
          # ÂøÖ„ÅöÊúÄÊñ∞„ÅÆÁä∂ÊÖã„Çí‰øùÂ≠òÔºàEvidence Áî®Ôºâ
          kubectl get ksvc hello -n default -oyaml > /tmp/ksvc_ready.yaml

      - name: Upload KSVC State
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ksvc-state
          path: /tmp/ksvc_ready.yaml
          if-no-files-found: error

  evidence-dod:
    name: evidence-dod
    needs: [knative-ready]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download KSVC State
        uses: actions/download-artifact@v4
        with:
          name: ksvc-state
          path: /tmp/

      - name: Install yq (v4)
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Detect KSVC YAML path
        id: detect_ksvc
        run: |
          set -euo pipefail
          CANDIDATES=(
            "/tmp/ksvc_ready.yaml"
            "/tmp/ksvc-state/ksvc_ready.yaml"
            "/tmp/ksvc-state/ksvc_ready.yml"
          )
          for p in "${CANDIDATES[@]}"; do
            if [ -f "$p" ]; then
              echo "p=$p" >> "$GITHUB_OUTPUT"
              echo "Found KSVC yaml at $p"
              exit 0
            fi
          done
          echo "::error::ksvc_ready.yaml not found under /tmp"
          ls -R /tmp || true
          exit 1

      - name: Generate Evidence
        run: |
          set -euo pipefail
          chmod +x scripts/gen_evidence_kservice_ready.sh
          ./scripts/gen_evidence_kservice_ready.sh "${{ steps.detect_ksvc.outputs.p }}"

      - name: Run DoD Enforcer
        id: dod_check
        run: |
          set -euo pipefail

          chmod +x scripts/dod_enforcer.sh
          ./scripts/dod_enforcer.sh

      - name: Upload Evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evidence-reports
          path: reports/*.md

      - name: Comment PR with Results
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DOD_STATUS="${{ steps.dod_check.outcome }}"
          LATEST_EVIDENCE=$(ls -t reports/*.md 2>/dev/null | head -1 || echo "")

          if [ -n "$LATEST_EVIDENCE" ]; then
            EVIDENCE_CONTENT=$(cat "$LATEST_EVIDENCE")
          else
            EVIDENCE_CONTENT="No evidence generated"
          fi

          if [ "$DOD_STATUS" = "success" ]; then
            ICON="‚úÖ"
            SUMMARY="DoD check PASSED"
          else
            ICON="‚ùå"
            SUMMARY="DoD check FAILED"
          fi

          gh pr comment ${{ github.event.pull_request.number }} --body \
            "$ICON **PR Validate Results**: $SUMMARY

          ### Evidence

          \`\`\`
          $EVIDENCE_CONTENT
          \`\`\`

          ---
          ü§ñ Auto-generated by PR Validate workflow"

      - name: Fail if DoD not met
        if: steps.dod_check.outcome != 'success'
        run: |
          echo "::error::DoD check failed - READY=True not confirmed in evidence"
          exit 1