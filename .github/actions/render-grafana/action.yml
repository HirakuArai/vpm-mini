name: Render Grafana PNG
description: Render dashboard PNG and upload as artifact
inputs:
  from:
    description: "from"
    default: "now-30m"
  to:
    description: "to"
    default: "now"
runs:
  using: "composite"
  steps:
    - name: Init
      shell: bash
      run: |
        mkdir -p artifacts
        : > artifacts/evidence.log
        : > artifacts/headers.txt
    - name: Load dashboard metadata
      shell: bash
      run: |
        set -euo pipefail
        FILE="$GITHUB_WORKSPACE/infra/observability/dashboard_target.json"
        [ -f "$FILE" ] || { echo "::error file=$FILE::dashboard_target.json not found"; exit 1; }
        python3 - <<'PY'
        import json, os, sys

        p = os.path.join(os.environ['GITHUB_WORKSPACE'], 'infra/observability/dashboard_target.json')
        with open(p, 'r', encoding='utf-8') as fh:
            data = json.load(fh)
        grafana = data.get('grafana', {}) if isinstance(data, dict) else {}
        missing = [key for key in ['org', 'uid', 'slug', 'panelId'] if not grafana.get(key)]
        if missing:
            print(f"::error ::Missing fields: {','.join(missing)}", flush=True)
            sys.exit(1)
        with open(os.environ['GITHUB_ENV'], 'a', encoding='utf-8') as env:
            env.write(f"DASH_ORG={grafana['org']}\\nDASH_UID={grafana['uid']}\\nDASH_SLUG={grafana['slug']}\\nDASH_PANEL={grafana['panelId']}\\n")
        with open('artifacts/evidence.log', 'a', encoding='utf-8') as ev:
            ev.write(f"SSOT_UID={grafana['uid']}\\nSSOT_SLUG={grafana['slug']}\\nSSOT_PANEL={grafana['panelId']}\\n")
        PY
    - name: Render PNG
      shell: bash
      env:
        INPUT_FROM: ${{ inputs.from }}
        INPUT_TO: ${{ inputs.to }}
        GRAFANA_BASE_URL: ${{ vars.GRAFANA_BASE_URL || 'http://grafana.monitoring.svc.cluster.local' }}
        GRAFANA_API_TOKEN: ${{ secrets.GRAFANA_API_TOKEN }}
      run: |
        set -euo pipefail
        BASE="${GRAFANA_BASE_URL%/}"
        URL="${BASE}/render/d-solo/${DASH_UID}/${DASH_SLUG}"
        FROM="${INPUT_FROM}"; TO="${INPUT_TO}"
        AUTH=()
        [ -n "${GRAFANA_API_TOKEN:-}" ] && AUTH+=(-H "Authorization: Bearer ${GRAFANA_API_TOKEN}")
        HTTP=$(curl -sS -w "%{http_code}" "${AUTH[@]}" -H "X-Org-Id: ${DASH_ORG}" \
          -G "$URL" --data-urlencode panelId="${DASH_PANEL}" \
          --data-urlencode from="${FROM}" --data-urlencode to="${TO}" \
          -D artifacts/headers.txt -o artifacts/out.png || true)
        CT=$(grep -i '^content-type:' artifacts/headers.txt | awk '{print tolower($2)}' | tr -d '\r')
        SIZE=$(stat -c%s artifacts/out.png 2>/dev/null || stat -f%z artifacts/out.png 2>/dev/null || echo 0)
        SIG=$(head -c 8 artifacts/out.png | xxd -p | awk '{print tolower($0)}')
        echo "HTTP=${HTTP} CT=${CT:-n/a} SIZE=${SIZE} SIG=${SIG}" | tee -a artifacts/evidence.log
        if [ "$HTTP" = "200" ] && echo "$CT" | grep -q 'image/png' && [ "$SIZE" -ge 512 ] && echo "$SIG" | grep -q '^89504e47'; then
          echo "== FOOTER == OK" | tee -a artifacts/evidence.log
        else
          echo "== FOOTER == NG" | tee -a artifacts/evidence.log
          exit 1
        fi
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grafana-render
        path: artifacts/
