name: Render Grafana PNG
description: Render dashboard PNG and upload as artifact
inputs:
  from:
    description: "from"
    default: "now-30m"
  to:
    description: "to"
    default: "now"
runs:
  using: "composite"
  steps:
    - name: Init
      shell: bash
      run: |
        mkdir -p artifacts
        : > artifacts/evidence.log
        : > artifacts/headers.txt
    - name: Load dashboard metadata
      shell: bash
      run: |
        set -euo pipefail
        FILE="$GITHUB_WORKSPACE/infra/observability/dashboard_target.json"
        [ -f "$FILE" ] || { echo "::error file=$FILE::dashboard_target.json not found"; exit 1; }
        python3 - <<'PY'
        import json, os, sys

        p = os.path.join(os.environ['GITHUB_WORKSPACE'], 'infra/observability/dashboard_target.json')
        with open(p, 'r', encoding='utf-8') as fh:
            data = json.load(fh)
        grafana = data.get('grafana', {}) if isinstance(data, dict) else {}
        missing = [key for key in ['org', 'uid', 'slug', 'panelId'] if not grafana.get(key)]
        if missing:
            print(f"::error ::Missing fields: {','.join(missing)}", flush=True)
            sys.exit(1)
        org = str(grafana['org'])
        uid = str(grafana['uid'])
        slug = str(grafana['slug'])
        panel = str(grafana['panelId'])
        with open(os.environ['GITHUB_ENV'], 'a', encoding='utf-8') as env:
            env.write(f"DASH_ORG={org}\n")
            env.write(f"DASH_UID={uid}\n")
            env.write(f"DASH_SLUG={slug}\n")
            env.write(f"DASH_PANEL={panel}\n")
        with open('artifacts/evidence.log', 'a', encoding='utf-8') as ev:
            ev.write(f"DASH_ORG={org}\nDASH_UID={uid}\nDASH_SLUG={slug}\nDASH_PANEL={panel}\n")
        PY
    - name: Show resolved DASH_*
      shell: bash
      run: |
        set -euo pipefail
        echo "DASH_ORG=${DASH_ORG:-<unset>}"
        echo "DASH_UID=${DASH_UID:-<unset>}"
        echo "DASH_SLUG=${DASH_SLUG:-<unset>}"
        echo "DASH_PANEL=${DASH_PANEL:-<unset>}"
    - name: Render PNG
      shell: bash
      env:
        INPUT_FROM: ${{ inputs.from }}
        INPUT_TO: ${{ inputs.to }}
        GRAFANA_BASE_URL: ${{ env.GRAFANA_BASE_URL || 'http://grafana.monitoring.svc.cluster.local' }}
        GRAFANA_API_TOKEN: ${{ env.GRAFANA_API_TOKEN }}
      run: |
        set -euo pipefail
        BASE="${GRAFANA_BASE_URL%/}"
        UID="${DASH_UID}"; SLUG="${DASH_SLUG}"; PANEL="${DASH_PANEL}"
        FROM="${INPUT_FROM}"; TO="${INPUT_TO}"
        ORG="${DASH_ORG}"
        URL="${BASE}/render/d-solo/${UID}/${SLUG}"
        echo "BASE=$BASE UID=$UID SLUG=$SLUG PANEL=$PANEL ORG=$ORG FROM=$FROM TO=$TO" | tee -a artifacts/evidence.log

        AUTH=()
        [ -n "${GRAFANA_API_TOKEN:-}" ] && AUTH+=(-H "Authorization: Bearer ${GRAFANA_API_TOKEN}")

        CODE=$(curl -sS -m 20 -w "%{http_code}" -I -G "${AUTH[@]}" -H "X-Org-Id: ${ORG}" \
          "$URL" --data-urlencode panelId="${PANEL}" --data-urlencode from="${FROM}" --data-urlencode to="${TO}" -o /dev/null || true)
        echo "PRE_HTTP=${CODE}" | tee -a artifacts/evidence.log

        HTTP=""; CT=""; SIZE=0; SIG=""
        for i in 1 2 3; do
          HTTP=$(curl -sS -m 60 --retry 2 --retry-delay 2 --retry-all-errors \
            -w "%{http_code}" -G "${AUTH[@]}" -H "X-Org-Id: ${ORG}" \
            "$URL" --data-urlencode panelId="${PANEL}" --data-urlencode from="${FROM}" --data-urlencode to="${TO}" \
            -D artifacts/headers.txt -o artifacts/out.png || true)
          CT=$(grep -i '^content-type:' artifacts/headers.txt | awk '{print tolower($2)}' | tr -d '\r')
          SIZE=$(stat -c%s artifacts/out.png 2>/dev/null || stat -f%z artifacts/out.png 2>/dev/null || echo 0)
          SIG=$(head -c 8 artifacts/out.png | xxd -p | awk '{print tolower($0)}')
          echo "TRY=$i HTTP=${HTTP} CT=${CT:-n/a} SIZE=${SIZE} SIG=${SIG}" | tee -a artifacts/evidence.log
          if [ "$HTTP" = "200" ] && echo "$CT" | grep -q 'image/png' && [ "$SIZE" -ge 512 ] && echo "$SIG" | grep -q '^89504e47'; then
            break
          fi
          sleep 2
        done

        if [ "$HTTP" = "200" ] && echo "$CT" | grep -q 'image/png' && [ "$SIZE" -ge 512 ] && echo "$SIG" | grep -q '^89504e47'; then
          echo "== FOOTER == OK" | tee -a artifacts/evidence.log
        else
          echo "== FOOTER == NG" | tee -a artifacts/evidence.log
          exit 1
        fi
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grafana-render
        path: artifacts/
